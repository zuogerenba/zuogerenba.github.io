(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{562:function(a,t,s){"use strict";s.r(t);var e=s(42),l=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"_1-webpack的优化-用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-webpack的优化-用途"}},[a._v("#")]),a._v(" 1.webpack的优化/用途")]),a._v(" "),s("h3",{attrs:{id:"_2-10个js用到1个-怎么优化打包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10个js用到1个-怎么优化打包"}},[a._v("#")]),a._v(" 2.10个js用到1个，怎么优化打包")]),a._v(" "),s("h3",{attrs:{id:"_3-postcss的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-postcss的作用"}},[a._v("#")]),a._v(" 3.postcss的作用")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1.进行查询浏览器兼容，最近两个版本，not dead\n2.查询到后为css添加前缀，样式重置等操作\n")])])]),s("h4",{attrs:{id:"_4-loader和plugins的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-loader和plugins的区别"}},[a._v("#")]),a._v(" 4.loader和plugins的区别")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("我理解的loader和plugins是：\n\t0.官方的描述：\n\t\t1.loaders是用于转换一些特定的模块类型的，例如css，less，png这些资源。\n\t\t2.plugin是用于执行更加广泛的任务，打包优化，资源管理，环境变量注入等\n\t1.loader中可以使用插件，且plugins是一个数组，一个loader可以使用多个plugin\n\t2.loader放在module中，plugin放在plugins中\n")])])]),s("h3",{attrs:{id:"_5-webpack5新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-webpack5新特性"}},[a._v("#")]),a._v(" 5.webpack5新特性")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1.加载其他资源无需安装file-loader，url-loader，直接使用asset module type模块，使其可以加载图片资源，配置存放路径等。\n")])])]),s("h3",{attrs:{id:"_6-babel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-babel"}},[a._v("#")]),a._v(" 6.babel")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1.babel是什么？\n\tbabel是一个工具链，主要用于旧浏览器或者缓解中将ES2015+代码转换为向后兼容版本的JS\n\t包括语法转换、源代码转换、Polyfill实现目标缓解缺少的功能等\n2.babel有哪些插件？\n\t1.@babel/core必装，就像postcss一样功能少，但是是必须项\n\t2.@babel/cli 可以在命令行中使用\n\t3.@babel/plugin-transform-arrow-functions 转换箭头函数\n\t4.@babel/plugin-transform-block-scoping 转换let const\n\t5.@babel/preset-env 预设，可以一次性转换需要转换的，无需一个个书写\n3.babel的原理（如何将一段（ES6，TS，React）转成领哟段代码（ES5）的呢？）\n\t1.可以把babel看成一个编译器，就跟V8引擎一样，源代码->原AST->新AST->浏览器识别的字节码\n\t2.总体来说就是把自己的源代码转换成浏览器可以直接识别的另一段代码\n\t3.例子，就像把lisp语言转换成C语言一样，再去编译，链接，执行\n")])])]),s("h3",{attrs:{id:"_7-babel的编译器工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-babel的编译器工作流程"}},[a._v("#")]),a._v(" 7.babel的编译器工作流程")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1.解析阶段\n2.转换阶段\n3.生成阶段\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);