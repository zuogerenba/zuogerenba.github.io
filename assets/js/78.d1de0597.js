(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{558:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"_1-promise-async-await-介绍一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-promise-async-await-介绍一下"}},[t._v("#")]),t._v(" 1 Promise async await 介绍一下")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Promise他是解决异步编程的一种方案；\n主要有两个特点：\n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("解决了回调地狱\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("可以链式调用\n    \n它本身具有race，all，resolve，reject等方法，原型上有then，catch等方法，\n其中promise接收一个函数，并且这个函数又有两个参数，分别是执行成功的回调resolve，失败的回调reject。\n其中"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("then第一个参数是执行成功的回调，第二个参数是执行失败的回调，"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("catch相当于"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("then的第二个回调，他可以指定reject的回调\n")])])]),s("h3",{attrs:{id:"_2判断数组-string-数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2判断数组-string-数字"}},[t._v("#")]),t._v(" 2判断数组/String/数字")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("数组：Array.isArray / arr.constructor===Array / instanceof\n字符串：typeof\t/ str.constructor===String\n数字：isNaN\t/ typeof / constructor\n")])])]),s("h3",{attrs:{id:"_3typeof返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3typeof返回值"}},[t._v("#")]),t._v(" 3typeof返回值")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("除了null(返回的是object)的基本类型+function+object\n")])])]),s("h3",{attrs:{id:"_4map和foreach的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4map和foreach的区别"}},[t._v("#")]),t._v(" 4map和foreach的区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("两者功能差不多的\nforEach不会返回结果，直接修改原来的数组\nmap返回全新的数组\n")])])]),s("h3",{attrs:{id:"_5-es6特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-es6特性"}},[t._v("#")]),t._v(" 5.es6特性")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let/const /字符串模板/ 箭头函数/ 函数参数默认值/ 展开运算符/解构\nset，map，promise\n")])])]),s("h3",{attrs:{id:"_6-es6的类中-静态属性和构造函数谁先加载-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-es6的类中-静态属性和构造函数谁先加载-为什么"}},[t._v("#")]),t._v(" 6. es6的类中 静态属性和构造函数谁先加载 为什么 ？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])])]),s("h3",{attrs:{id:"_7-怎么在外部调用静态属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-怎么在外部调用静态属性"}},[t._v("#")]),t._v(" 7.怎么在外部调用静态属性？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])])]),s("h3",{attrs:{id:"_8-事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-事件循环"}},[t._v("#")]),t._v(" 8.事件循环")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("宏任务：\n\tscript整体代码\n    setTimeout\n    setInterval\n    I/O\n    UI render\n微任务：\n\tprocess.nextTick\n\t\n\tAsync/Await\n事件循环：\n\t1.先执行整体代码，这属于宏任务；\n\t2.中途遇到宏任务，加入宏任务队列，遇到微任务加入微任务队列\n\t3.整体代码执行到底的时候，再读取本轮的微任务全部执行完，在读取宏任务进行下一轮执行\n\t\nJS是单线程的，一个时间点做一个事情，为了防止执行阻塞，有了同步任务异步任务，\n")])])]),s("h3",{attrs:{id:"_9-es6模块和commonjs的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-es6模块和commonjs的区别"}},[t._v("#")]),t._v(" 9.ES6模块和CommonJS的区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.\ncommonJS模块输出的是一个值的拷贝，输出后，模块内部变化影响不到这个值\nES6输出的是值的引用\n\n2.CommonJS是运行时加载，ES6模块式编译时输出接口\n")])])]),s("h3",{attrs:{id:"_10-怎么在事件捕获阶段触发事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-怎么在事件捕获阶段触发事件"}},[t._v("#")]),t._v(" 10. 怎么在事件捕获阶段触发事件 ?")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("addEventListener('click',function,iscapture)\n第三个参数\n")])])]),s("h3",{attrs:{id:"_11-xss发生场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-xss发生场景"}},[t._v("#")]),t._v(" 11.xss发生场景")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("全称：Cross-site scripting，代码注入\nXSS 攻击就是黑客往页面中注入恶意脚本，然后将页面的一些重要数据上传到恶意服务器。常见的三种 XSS 攻击模式是存储型 XSS 攻击、反射型 XSS 攻击和基于 DOM 的 XSS 攻击。\n")])])]),s("h3",{attrs:{id:"_12-实现apply-call-bind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-实现apply-call-bind"}},[t._v("#")]),t._v(" 12.实现apply/call/bind")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.apply")]),t._v("\nFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prot\n")])])]),s("h3",{attrs:{id:"_13-原型和原型链说一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-原型和原型链说一下"}},[t._v("#")]),t._v(" 13.原型和原型链说一下")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原型： 在JavaScript高级程序设计中给出的解释是· 每一个构造函数（对应的就是类函数）都有一个prototype属性（强调下是属性），这个prototype属性会指向一个原型对象（强调下是对象）。该原型属性指向的原型对象称之为原型\n\t例子：比如说，一个function Foo(),他有一个prototype属性这个属性指向Foo.prototype，然后Foo.prototype的constructor指向Foo；\n\n原型链： 每一个对象都有隐式原型，指向创建该对象的构造函数的原型。对象可以通过隐式原型查找不属于该对象的属性。\n\t比如：function Foo() __proto__ 是Function.prototype 的 __proto__是Object.prototype;\n\n注意 function Function的显示原型和隐式原型都是指向Function.prototype\n")])])]),s("h3",{attrs:{id:"_14-说一下同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-说一下同源策略"}},[t._v("#")]),t._v(" 14.说一下同源策略")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("A: 什么是同源？\nS: 同源策略是一种安全协议，即协议，域名，端口都相同\n\nA: 为什么用同源策略？\nS：没有同源策略的话，利用iframe嵌套银行的网页，将账号密码提交到他人的表单中就不安全了\n\n\n")])])]),s("h3",{attrs:{id:"_15-new发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-new发生了什么"}},[t._v("#")]),t._v(" 15.new发生了什么?")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.创建了一个新对象199\n2.将构造函数的作用域赋值给新对象(this指向这个新对象)/绑定this\n3.执行构造函数里面的代码(给这个新对象添加属性)/新的对象连接到原型\n4.返回新对象\n")])])]),s("h3",{attrs:{id:"_16-es5继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-es5继承"}},[t._v("#")]),t._v(" 16.ES5继承")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.构造函数\n2.原型继承\n3.组合继承\n\tfunction Person(age){\n\t\tthis.age = age;\n\t}\n\tfunction Student(age,name){\n\t\tPerson.call(this,age)\n\t\tthis.name = name;\n\t}\n\tStudent.prototype = new Person()\n\tProgrammer.prototype.constructor = Programmer // 修复构造函数指向\n\t\n\tlet qmj = new Student(18,'qmj')\n4.寄生继承\n5.寄生组合继承...\n")])])]),s("h3",{attrs:{id:"_17-事件流-事件冒泡阻止方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-事件流-事件冒泡阻止方法"}},[t._v("#")]),t._v(" 17.事件流/事件冒泡阻止方法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("阻止冒泡：\n\tW3C：e.stopPropagation()\n\tIE：e.cancelBubble = true\n\t项目中：在做文案中心年度报告的时候，第一次进入就需要一个弹窗图片，点击图片进入年度报告，点击图片外部则display: none;这就需要阻止冒泡。\n取消默认事件：\n\tw3c:e.preventDefault()\n\tie: e.returnValue = false\n")])])]),s("h3",{attrs:{id:"_18-事件代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-事件代理"}},[t._v("#")]),t._v(" 18.事件代理")]),t._v(" "),s("ul",[s("li",[t._v("节省内存，避免操作大量的dom，给节点注册，注销事件")]),t._v(" "),s("li",[t._v("注意e.target是单独的节点（1，2，3...），e.currentTarget是整个ul")])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("ul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("3"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("4"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("5"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ul "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#ul'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"_19-为什么js是单线程的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-为什么js是单线程的"}},[t._v("#")]),t._v(" 19.为什么js是单线程的")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("js设计出来是用于操作DOM的，一个事件只能做一件事情\n假如这里要删除dom，那里要给这个dom添加东西，那就不\n知道以谁为准了\n")])])]),s("h3",{attrs:{id:"_20-undefined-null-为什么是true"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-undefined-null-为什么是true"}},[t._v("#")]),t._v(" 20.undefined == null 为什么是true？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("这个规定，背下来就行\n")])])]),s("h3",{attrs:{id:"_21-手写ajax请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-手写ajax请求"}},[t._v("#")]),t._v(" 21.手写ajax请求")]),t._v(" "),s("h3",{attrs:{id:"_22-缓存的用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-缓存的用法"}},[t._v("#")]),t._v(" 22.缓存的用法")]),t._v(" "),s("h3",{attrs:{id:"_23-语义化标签在框架里能进行seo优化吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-语义化标签在框架里能进行seo优化吗"}},[t._v("#")]),t._v(" 23.语义化标签在框架里能进行SEO优化吗？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("不能\n")])])]),s("h3",{attrs:{id:"_24-发布者-订阅者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-发布者-订阅者模式"}},[t._v("#")]),t._v(" 24.发布者——订阅者模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.定义一个事件对象，里面有两个方法，去订阅(on)和去发布(emit)方法\n2.去订阅接受两个参数，事件关键字key，key对应的回调函数fn\n\t判断是否有存储key对应的回调函数列表，无？创建并push，有，push回调函数\n3.去发布emit的作用是取出对应key的回调函数并且执行，把参数也带上\n\tlet key = [].shift.call(arguments)取出key\n\tfns = this.list[key];取出key对应的回调函数\n\tfns.forEach fn.apply(this, arguments);执行\n")])])]),s("h3",{attrs:{id:"_25-const-数组-对象内容可以被改变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-const-数组-对象内容可以被改变"}},[t._v("#")]),t._v(" 25.const 数组/对象内容可以被改变")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("引用地址不改变，但内容改变\n\n对象使用 Object.freeze(obj)就可以不被改变\n")])])]),s("h3",{attrs:{id:"_26-axios的二次封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-axios的二次封装"}},[t._v("#")]),t._v(" 26.axios的二次封装")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("好处：可以不对请求库直接进行依赖，便于管理\n\n在config.js里面配置好baseURL，超时信息等，\n在request.js里面配置请求和响应(拿到出具就返回res)，\n有err就判断他返回的状态码，进行响应的提示，最后返回axios的实例\n\n然后就是在相应的请求文件里面配置拼接的api地址，暴露出相关api即可\n")])])]),s("h3",{attrs:{id:"_27-let-a-1和-a-1区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-let-a-1和-a-1区别"}},[t._v("#")]),t._v(" 27.let a = 1和 a = 1区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let a = 1 是定义在自己的作用域里面的\n\na = 1 都是定义在window上的\n")])])]),s("h3",{attrs:{id:"_28-数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-数据类型"}},[t._v("#")]),t._v(" 28.数据类型")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("介绍有哪些？\nundefined和null的区别？\nnumber和bigint的区别？\n判断数据类型的typeof和instanceof，Object.prototype.toString.call()\n\n值类型：null Number Undefined String Boolean Bigint Symbol\n引用类型： Object\n\nnull和undefined区别：\n\t1.typeof不一样，null是object，undefined是undefined\n\t2.null转换成数字为0，undefined转换成数字是NAN\n\t3.null是声明了，赋值为null；undefined是声明了，但没有赋值\n\t\nnumber和bigint的区别：\n\t1.范围不一样：number为 -（2^53-1) -- 2^53-1;bigint就没有这个限制\n\t2.定义书写方式不一样，number直接写出来；bigint需要在后面加n；\n\t2.number可以是浮点数，也可是整数；bigint只能是整数；\n\t\ntypeof/instanceof/Object.prototype.toString\n\t1.typeof: \n\t\tnull->object：在底层都是二进制，二进制前三位是0，就会被判断成object，null全是0；\n\t\tstring/function/object/number/undefined\n\t2.instanceof：\n\t\t用于准确判断对象的，因为用typeof判断的话，除了function其他全都是object。\n\t\t判断的原理就是查看左边的隐式原型是否在右边的原型链上；\n\t3.Object.prototype.toString.call\n\t\t精准判断所有的数据类型，包括各种对象\n")])])]),s("h3",{attrs:{id:"_29-let-const-var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-let-const-var"}},[t._v("#")]),t._v(" 29.let/const/var")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let/const和var之间的区别？\nlet和const的区别？\n\nlet/const有块级作用域，一个花括号就是块级作用域\nlet/const有暂时性死区 \tvar是变量提升\n\nconst和let的区别：\n\t1.声明一个常量，不会改变，但是引用类型可以改变，可以通过freeze使其达到不改变\n\t2.const声明必须赋值\n\t\n")])])]),s("h3",{attrs:{id:"_30-箭头函数区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-箭头函数区别"}},[t._v("#")]),t._v(" 30.箭头函数区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("箭头函数与普通函数区别？\n\n\t1.箭头函数没有arguments，建议用剩余运算符\n\t2.没有prototype，不能做构造函数\n\t3.没有自己的this，在你定义函数时就确定了this\n\t4.不能使用call，apply改变this\n\t5.当只有一个参数一个返回值时，可以省略参数括号，大括号和return\n")])])]),s("h3",{attrs:{id:"_31-promise实现过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-promise实现过程"}},[t._v("#")]),t._v(" 31.promise实现过程")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.定义基本数据\n\t定义promise状态：默认为 'pending'\n\t定义成功返回值res 默认为空\n\t定义失败原因reason 默认为空\n\t定义存放成功回调函数的数组\n\t定义存放失败回调函数的数组\n\n2.定义成功回调函数resolve\n\t传进一个参数data，\n\t如果状态为pending的话，把状态该为fullfiled\n\t把上面定义数value设置为传进来的data\n\t取出存放成功回调函数进行执行\n\n2.定义失败的回调函数\n\t传进一个参数：失败的原因\n\t状态为pending的话，把状态改为rejected\n\t再把定义的reason设置为传进来的reason\n\t再去执行失败的回调函数\n\t\n3.定义.then方法\n\t.then有两个回调，第一个成功，第二个失败\n\t判断当前状态去执行成功还是失败\n\t如果是pending状态，将成功或者失败回调事件存入对应的数组中\n\t\n")])])]),s("h3",{attrs:{id:"_32-null和undefined的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-null和undefined的区别"}},[t._v("#")]),t._v(" 32.null和undefined的区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.含义\n\tnull是尚未存在的对象\n\tundefined代表的是声明了，但未赋值的原始值\n2.转数字\n\tnull转数字为0\n\tundefined转数字为NaN\n3.typeof不一样\n\tnull是object\n\tundefined是undefined\n")])])]),s("h3",{attrs:{id:"_33-axios二次封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33-axios二次封装"}},[t._v("#")]),t._v(" 33.axios二次封装")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("为什么封装：\n\t不进行封装，想要在那个组件发送请求，就在八个组件使用axios，这样很多组件就依赖它，如果axios不维护或者出现重大bug，这样需要在每一个组件修改，这样很麻烦。\n\t单独在一个文件里面进行对配置，请求，响应错误信息等进细节行封装，再导出这个实例，在组件里面使用就没有后顾之忧了，因为只有封装文件依赖了axios，到时候只需要修改封装文件\n\t\n怎么封装：\n\t封装了一些基本配置信息，baseUrl，Timeout，\n\t配置了请求拦截(用于发送网络请求时，显示loading组件，验证token)\n\t配置响应拦截返回响应异常信息\n\t导出这个实例在需要的地方使用\n")])])]),s("h3",{attrs:{id:"_34-数据双向绑定原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34-数据双向绑定原理"}},[t._v("#")]),t._v(" 34.数据双向绑定原理")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("通过发布订阅者模式结合Object.defineProperty去监听每个属性的改变和访问。主要需要实现4个功能：\n\t观察者Observer/订阅器Dep/订阅者Watcher/解析器Compile\n\n观察者Obserr：\n\t写一个函数里面用set和get监听属性的被谁依赖与改变。然后遍历(Object.keys(obj))对象的每一个属性，让每一个属性被监听.\n\n订阅器Dep：\n\t订阅器收集订阅者，数据变化的时候调用订阅者更新函数；\n\t两个函数，观察者的get函数里面监听那里被依赖了，就把订阅者添加到订阅者数组里面，观察者的set监听到数据被改变了，就调用订阅者一个一个取出来调用更新函数；\n\t\n订阅者Watcher：\n\t订阅者是要做一些具体的事情的，加到订阅器数组和执行数据更新操作；\n\t因为在订阅器里面执行的是把相应的订阅者一个个取出来调用订阅者的更新函数，所以在订阅者里面主要实现的是update具体的细节，\n\tupdate：里面通过this.vm.data[this.exp]获取到最新的数据，进行更新；\n\n解析器Compile：\n\t通过上面三个其实就已经实现了数据双向绑定，但是没有进行解析dom节点，\n")])])]),s("h3",{attrs:{id:"_35-commonjs-amd-cmd-es6module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35-commonjs-amd-cmd-es6module"}},[t._v("#")]),t._v(" 35.CommonJS/AMD/CMD/ES6Module")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("commonjs:\n\t是同步的，在服务端比较快，在浏览器端会慢；限于网络更合理的是使用异步加载模式;\n\t通过module.exports导出和require导入\nAMD：\n\t是异步加载的方式，模块加载不影响后面语句执行；依赖这个模块的语句都定义在一个回调函数上，加载完才会执行\nES6Module:\n\t通过export导出，通过import{}导入；如果是export default就是不需要大括号；\n\t\nCommonJS和ES6 ES6的区别：\n\t1.CommonJS输出的是一个值的拷贝，ES6输出的是值的引用；\n\t\t前者就是输出后，模块内部变化就不会影响到这个值；\n\t\tES6是动态引用的，遇到import命令时才会去读取里面的值\n\t2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\n\t\t运行时加载：就是输入时先加载整个模块，生成一个对象，再从这里面读取方法\n\t\t编译时加载：ES6模块不是对象，而是通过export输出指定的代码，import采用静态命令的形式。在import是可以指定加载某个输出值，而不是整个模块\n")])])]),s("h3",{attrs:{id:"_35-commonjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35-commonjs"}},[t._v("#")]),t._v(" 35.CommonJs")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("commonjs:\n\t1.里面通过module.exports/exports导出，通过require()导入。\n\t\trequire()是个函数，具有返回值，其返回值就是exports这个对象；\n\t2.module.exports：\n\t\t在commonjs规范里面是没有提到module.exports的。\n\t\t是Node为了实现导出而实现的一个Module类，在源码里module.exports=exports，使这两个指向同一个对象\n\t\t本质上就是module.exports在导出\n\t\t但是如果你在模块里 module.exports = {}，module.exports就和exports断开联系了，最终导入的就是module.exports新对象\n\t3.require(X)查找细节\n\t\t情况一：X是核心模块，直接返回核心模块，停止查找\n\t\t情况二：X是./ ../ /\n\t\t\t第一步：X当做一个文件在对应目录下查找\n\t\t\t\t1.有后缀名，按照后缀名进行查找对应文件\n\t\t\t\t2.无后缀名，查找文件X=>查找X.js=>查找X.json=>查找X.node\n\t\t\t第二步：X是一个目录\n\t\t\t\t1.查找X/index.js=>index.json=>index.node\n\t\t\t第三步：没找到返回 Not Found\n\t\t情况三：直接是X，但X不是核心模块\n\t\t\t在当前目录查找node_modules，然后上一层目录node_modules，直到根目录\n\t4.模块加载过程\n\t\t1）commonJs加载时同步的，加载完才会进行下一步代码\n\t\t2）不会进行多次加载，index.js加载a.js和b.js a.js加载b.js:\n\t\t\t则b.js只会被执行一次，module对象中的loaded被设置为true\n\t\t3）模块相互依赖，是一个图结构，引用顺序是按照图的深度优先遍历的，即使循环引用，形成闭环，最终每个模块只会执行一次。\n")])])]),s("h3",{attrs:{id:"_36-防抖节流的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36-防抖节流的区别"}},[t._v("#")]),t._v(" 36.防抖节流的区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("防抖：\n\t原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时\n\t提交表单，搜索，窗口resize，等使用防抖\n\n节流：\n\t使函数有节制的执行，而不是全部进行执行，一般都是在多少秒内执行一次。与防抖最主要的区别在于，这个时间点内，不断的执行这个函数，它也不会重新计时，而是等待给定的时间过去，再执行，才会被执行。\n\tscroll事件，mousemove事件需要持续执行的\n")])])]),s("h3",{attrs:{id:"_37-ajax的readystate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37-ajax的readystate"}},[t._v("#")]),t._v(" 37.Ajax的readystate")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0: 未初始化，尚未调用open\n1：启用，调用 .open但是为调用.send\n2：发送，已经调用send但是未接收到响应\n3：接收，已经接收到部分数据响应\n4：完成，已经接受到全部数据，而且可以在客户端使用\n")])])]),s("h3",{attrs:{id:"_38-和-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38-和-区别"}},[t._v("#")]),t._v(" 38. == 和 ===区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("==")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("===")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("==是非严格等于")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("=== 是严格等于")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("==判断的时候会进行类型转换，然后判断两边值是否相等")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不会进行转换，直接比较值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("undefined==null是true")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("undefined==null是false")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"C:%5CUsers%5C%E9%82%B1%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1598452624096.png",alt:"1598452624096"}})]),t._v(" "),s("h3",{attrs:{id:"_39-for-in-和-for-of-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_39-for-in-和-for-of-的区别"}},[t._v("#")]),t._v(" 39.for in 和 for of 的区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("for in")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("for of")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("获取的是键名key或者下标")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("获取的是键值value")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("会遍历整个对象的原型链，性能差")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("只遍历当前对象")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("数组遍历：会返回所有可枚举属性，包括原型链")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("只返回下标对应属性值")])])])]),t._v(" "),s("h3",{attrs:{id:"_40-函数定义方法及区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_40-函数定义方法及区别"}},[t._v("#")]),t._v(" 40.函数定义方法及区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.声明式定义\n\tfunction foo() {}\n\n2.函数表达式\n\tvar foo = function() {}\n\n3.箭头函数\n\tvar foo = () => {}\n\n4.对象里面的函数\n\tfoo: function() {}\n\n5.立即执行函数\n\t(function() {clg(1)})()\n\t\n区别：第一种会进行函数名提升，就是在定义之前调用会调用成功，这显然不符合规范。第二种则会报错，个人感觉第二种更符合规范一点。\n\n")])])]),s("h3",{attrs:{id:"_41-arguments转数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_41-arguments转数组"}},[t._v("#")]),t._v(" 41.arguments转数组")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("arguments是一个伪数组\n\n1.写个函数遍历arguments再push，再返回\n\n2.使用Array.prototype.slice.call(arguments)/[].slice.call()\n\n3.扩展运算符\n\tvar argsArray = [...arguments ];\n")])])]),s("h3",{attrs:{id:"_44-将数组转换为key-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_44-将数组转换为key-value"}},[t._v("#")]),t._v(" 44.将数组转换为key：value")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.扩展运算符...\nlet obj = {...arr} index为key\n\n2.遍历数组元素，将其添加到新对象中\nfunction foo(arr) {\n  let result = {}\n  for(let i = 0;i<arr.length;i++){\n    result[i] = arr[i]\n  }\n  return result;\n}\n")])])]),s("h3",{attrs:{id:"_42-跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42-跨域"}},[t._v("#")]),t._v(" 42.跨域")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.jasonp\n\n2.cors\n\n\t2.判断简单请求还是复杂请求\n\t\t简单请求必须满足两个条件：\n\t\t\t1.请求方法必须是：GET，POST，PUT之一\n\t\t\t2.content-type必须是：text/plain，multipart/form-data，application/x-www-form-\t\t\t\t\turlencoded之一\n")])])]),s("h3",{attrs:{id:"_43-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_43-arguments"}},[t._v("#")]),t._v(" 43.arguments")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("arguments相当于伪数组\n\nconsole.log(Object.prototype.toString.call(arguments)) // [object Arguments]\ntypeof arguments // object\n")])])]),s("h3",{attrs:{id:"_44-执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_44-执行上下文"}},[t._v("#")]),t._v(" 44.执行上下文")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.全局执行上下文\n\t1.默认或者基础执行上下文。不在函数内部就是全局。\n\t2.做两个事情：创建全局window对象（浏览器），this值等于这个对象\n\t3.一个程序只有一个全局执行上下文\n\n2.函数执行上下文\n\t1.每当一个函数被调用时，就会给这个函数创建一个函数执行上下文。 函数调用时创建。\n\t2.每个函数都有自己的执行上下文，但需要被调用才会创建。\n\t3.函数上下文可以有多个，新的执行上下文被创建，会按照定义顺序执行一系列步骤。\n\t\n3.创建执行上下文\n\t1.两个阶段：\n        1.创建阶段：在执行JavaScript前创建\n            1.确定this，即this绑定\n            \t1.全局执行上下文绑定到全局对象中，浏览器中就是window\n            \t2.在函数中，取决于函数是怎么被调用的。\n            \t\t1.被引用对象调用，this就是那个对象。\n            \t\t2.否则就是全局对象或者undefined（严格模式）\n            2.创建此法环境组件\n            3.创建变量环境组件\n        执行阶段；\n\t\n\t\n")])])]),s("h3",{attrs:{id:"_45-作用域-词法作用域-动态作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_45-作用域-词法作用域-动态作用域"}},[t._v("#")]),t._v(" 45.作用域——词法作用域&动态作用域")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("作用域是什么：定义变量的区域\n作用：规定了如何查找变量，也就是确定当前代码对变量的访问权限。\n词法作用域（静态作用域）：函数作用域在定义的时候就确定了。\n动态作用域：函数的作用域再调用时确定。\n\n例子\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// js是静态作用域，函数作用域是在定义时决定的，而不是在调用时决定的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'global'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'local'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// global 定义的时候决定的")]),t._v("\n")])])]),s("h3",{attrs:{id:"_46-加载海量数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_46-加载海量数据"}},[t._v("#")]),t._v(" 46.加载海量数据")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.缩短循环时间\n\trequestAniminationFrame通过分治的思想，将 100000 个 li 分批插入到页面中，并且我们通过 requestAniminationFrame 在页面重绘前插入新节点\n2.减少DOM操作次数\n\tDocumentFragment（MDN）可以减少DOM操作次数，降低回流对性能的影响。\n\t时间委托可以显著减少DOM操作次数\n\n")])])]),s("h3",{attrs:{id:"_47-defer和sync区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_47-defer和sync区别"}},[t._v("#")]),t._v(" 47.defer和sync区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("作用：两者的作用都是差不多的，使js异步加载，从而不会对DOM生成造成阻塞\ndefer: 表示js脚本在DOMContentLoaded事件之前执行\nasync：表示js脚本一旦加载完成，立即执行\n")])])]),s("h3",{attrs:{id:"_48-async-await原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_48-async-await原理"}},[t._v("#")]),t._v(" 48.async await原理")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.Promise 和 生成器的应用，往底层说就是微任务与协程的应用。\n2.async函数：异步执行和隐式返回promise\n\t在里面的返回值都是 Promise {<resolved>: 返回的东西}\n3.await关键字：默认帮我们创建Promise对象\n\t1.在里面executor函数中调用了resolve\n\t2.然后JS引擎暂停当前协程执行，将主线程控制权给父协程执行，同时把promise对象返回给父协程\n\t3.然后父协程调用promise.then来监控promise改变状态\n")])])]),s("h3",{attrs:{id:"_49-this指向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_49-this指向"}},[t._v("#")]),t._v(" 49.this指向")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.规则一：默认绑定\n\t不通过任何第三方调用，直接指向window\n2.规则二：隐式绑定\n\t由谁发起调用，就指向谁 obj1.foo()  this=>obj1\n3.规则三：显示绑定\n\tcall，apply，bind\n4.规则四：new绑定this\n\nthis指向的优先级：new>显示绑定>隐式绑定>默认绑定\n")])])]),s("h3",{attrs:{id:"_50-js如何解析的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_50-js如何解析的"}},[t._v("#")]),t._v(" 50.JS如何解析的")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.JS源码通过Parse模块生成抽象语法树AST。\n2.AST通过Ignition模块将语法树解析成字节码。\n3.字节码进步转成汇编，机器码，最后交给CPU执行。\n")])])]),s("h3",{attrs:{id:"_51-promise-all"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_51-promise-all"}},[t._v("#")]),t._v(" 51.promise.all")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])])]),s("h3",{attrs:{id:"_52-promise-retry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_52-promise-retry"}},[t._v("#")]),t._v(" 52.promise.retry")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("retry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" times"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("attempt")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("Attempt #")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("times"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" failed")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" times"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          times"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("attempt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("attempt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"_53-scr和href区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_53-scr和href区别"}},[t._v("#")]),t._v(" 53.scr和href区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.href：超文本引用，一般用在link和a等元素上，引用和页面关联的关系\n2.src：代表着资源，img，script上面，是指向外部资源的位置，会把它下载到当前的文档中，js脚本，img图片等等。\n")])])]),s("h3",{attrs:{id:"_54-前端路由实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_54-前端路由实现"}},[t._v("#")]),t._v(" 54.前端路由实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1.hash路由：原生方法实现好了\n\t1.在window上监听hashChange事件，监听location.hash改变。\n\t2.在里面switch case，匹配相应的路由，再去展示相应的组件\n\n2.history路由：\n\thistory是H5新出的，所以没有原生监听事件，需要自己去实现。\n\t1.首先需要改变a标签的默认行为，e.preventDefault();\n\t2.为a标签添加点击事件\n\t\t1.获取a标签里面的href属性，\n\t\t2.el.getAttribute("href"),history.pushState({}, "", href);\n\t\t3.调用自己定义的URLChange方法。\n\t3.URLChange方法里面做的事情就是switch case，去匹配location.pathname，匹配上了，展示相应的组件即可。\n')])])]),s("h3",{attrs:{id:"_55-深拷贝浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_55-深拷贝浅拷贝"}},[t._v("#")]),t._v(" 55.深拷贝浅拷贝")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("浅拷贝：只拷贝一层，如果存在两层以上无法拷贝，他会将被嵌套的对象的地址值赋值给它，但里面的内容是存在的，只是赋值而已，不是拷贝。\n\t1.扩展运算符... let obj1 = {...originObj}\n\t2.Object.assign({}, originObj)\n\t3.手动实现，只需要遍历一层属性，直接赋值即可\n\t4.数组有slice，concat\n\t\n深拷贝：存在两层以上都可以进行拷贝，使得整个对象都和源对象无关\n\t1.手动实现，需要递归，先判断该属性的类型是对象还是值类型，对象就进入递归\n\t2.JSON.parse(JSON.stringify(obj));\n\t\t缺陷：1.会忽略undefined、symbol和函数 2.循环引用会报错\n\n考虑循环引用深拷贝：hashMap\n\n")])])]),s("h3",{attrs:{id:"_56-洗牌算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_56-洗牌算法"}},[t._v("#")]),t._v(" 56.洗牌算法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shuffle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次从未处理的数组中随机取一个元素，")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后把该元素放到数组的尾部，")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即数组的尾部放的就是已经处理过的元素，")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//>>>作用是向下取整？")]),t._v("\n    random "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无符号右移位运算符向下取整")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6的结构赋值实现变量互换")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_57-虚拟dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_57-虚拟dom"}},[t._v("#")]),t._v(" 57.虚拟DOM")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("我对虚拟DOM的理解是：\n\n我们对将要插入到文档的DOM树进行分析，使用js对象的形式将DOM层级情况进行描述，tagname，props，children。最后将js对象树，插入到文档中。\n\n当页面结构发生改变，需要对DOM结构进行调整，先根据变更的状态，重新构建一个对象树，然后对比两个虚拟DOM对象，记录下两个树的差异。最后将记录的差异更新到真实DOM中，这样试图就更新了。\n\n虚拟DOM在大量修改DOM的时候，可以很好的提高操作效率，通过在操作前确定需要做的最小修改，尽可能较少DOM操作带来的重排重绘。\n")])])]),s("h3",{attrs:{id:"_58-快速排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_58-快速排序"}},[t._v("#")]),t._v(" 58.快速排序")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("quickSort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" curr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("h3",{attrs:{id:"_59-0、-0-结果是什么-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_59-0、-0-结果是什么-为什么"}},[t._v("#")]),t._v(" 59.[] == 0、[] == \"\", []=='0' 结果是什么，为什么")]),t._v(" "),s("h3",{attrs:{id:"_59-转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_59-转换规则"}},[t._v("#")]),t._v(" 59.==转换规则")]),t._v(" "),s("h3",{attrs:{id:"_60-非递归实现快排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_60-非递归实现快排"}},[t._v("#")]),t._v(" 60.非递归实现快排")]),t._v(" "),s("h3",{attrs:{id:"_61-判断对象是否为空"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_61-判断对象是否为空"}},[t._v("#")]),t._v(" 61.判断对象是否为空")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkNullObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_62-encodeuri和encodeuricomponent区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_62-encodeuri和encodeuricomponent区别"}},[t._v("#")]),t._v(" 62.encodeURI和encodeURIComponent区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("都是编码URL，唯一区别就是编码的字符范围\nencodeURI方法作用范围小\t\t\t\t\t\t\t\t\t\tencodeURIComponent区别作用范围大\n适合用于解析域名之类的，域名特殊字符不会被解析\t 域名中的特殊字符/会被转义，适合编码URL参数\t\t\n")])])]),s("h3",{attrs:{id:"_63-数组去重怎么考虑nan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_63-数组去重怎么考虑nan"}},[t._v("#")]),t._v(" 63.数组去重怎么考虑NaN")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.使用map和set数据结构，可以进行识别map.has(NaN)会被判断成true\n")])])]),s("h3",{attrs:{id:"_64-搜索发起请求-下面显示数据不对"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_64-搜索发起请求-下面显示数据不对"}},[t._v("#")]),t._v(" 64.搜索发起请求，下面显示数据不对")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.打断上一次请求\n2.节流防抖\n3.看时间戳\n")])])]),s("h3",{attrs:{id:"_65-中断一个网络请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_65-中断一个网络请求"}},[t._v("#")]),t._v(" 65.中断一个网络请求")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("XHR: \n\t1.xhr.abort()\nFetch:\n\t1.const controller = new AbortController() \n\tcontroller.abort()即可；\n")])])]),s("h3",{attrs:{id:"_66-prototype和-proto区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_66-prototype和-proto区别"}},[t._v("#")]),t._v(" 66.prototype和__proto区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.__proto__ 存在于所有对象上，prototype 只存在于函数上。\n2.__proto__ 用来表示当前对象的原型对象是什么，在检索属性时方便在原型链上递归向上去查找，实现了 obj.__proto__.__proto__... 原型链\n3.prototype 用来表示使用此构造函数初始化的对象继承自哪个原型对象\n\nFunction.prototype.__proto__ = Object.prototype;\n")])])]),s("h3",{attrs:{id:"_67-二维码登录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_67-二维码登录"}},[t._v("#")]),t._v(" 67.二维码登录")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.首先设备需要联网，携带设备信息向服务器请求生成二维码\n2.生成二维码ID与该设备绑定，返回二维码ID，并在设备上端展示\n3.扫描二维码，识别二维码ID\n4.把手机上的token，二维码信息，发送给服务端\n5.二维码与身份信息绑定，生成token（临时），并且返回给手机那边\n6.携带token发送给服务端，确认登录，\n7.返回token给设备，凭借Token去请求数据。\n")])])]),s("h3",{attrs:{id:"_68-bind的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_68-bind的作用"}},[t._v("#")]),t._v(" 68.bind的作用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.改变this指向\n2.创建一个新的函数，需要我们手动的去执行它。不像call，apply可以自动执行\n")])])]),s("h3",{attrs:{id:"_69-斐波那契函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_69-斐波那契函数"}},[t._v("#")]),t._v(" 69.斐波那契函数")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("int "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);