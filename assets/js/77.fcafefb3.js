(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{554:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一、计算机网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、计算机网络"}},[t._v("#")]),t._v(" 一、计算机网络")]),t._v(" "),e("h3",{attrs:{id:"_1-http与https区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-http与https区别"}},[t._v("#")]),t._v(" 1.http与https区别")]),t._v(" "),e("div",{staticClass:"language-\\ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("http相当于在网络上裸奔         https就是穿了衣服。\nhttp在传输数据的时候是明文的\t\thttps传输数据是经过SSL加密的\n安全性低\t\t\t\t\t\t         安全性高\n不需要ca证书，成本低\t\t\t\t    需要ca证书，需要一定的费用\n80端口\t\t\t\t\t\t           443端口\nhttp无状态连接\n")])])]),e("h3",{attrs:{id:"_2-七层-四层-五层协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-七层-四层-五层协议"}},[t._v("#")]),t._v(" 2.七层/四层/五层协议")]),t._v(" "),e("p",[e("img",{attrs:{src:"D:%5CNote%5C%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%5C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE.png",alt:"七层协议"}})]),t._v(" "),e("ul",[e("li",[t._v("应用层： DNS/HTTP/FTP/SMTP")]),t._v(" "),e("li",[t._v("运输层：TCP/UDP")])]),t._v(" "),e("h3",{attrs:{id:"_3-输入url到实现页面的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-输入url到实现页面的过程"}},[t._v("#")]),t._v(" 3.输入url到实现页面的过程")]),t._v(" "),e("ol",[e("li",[t._v("DNS解析，把域名解析成IP地址")]),t._v(" "),e("li",[t._v("客户端和服务端建立连接")]),t._v(" "),e("li",[t._v("客户端发起HTTP请求")]),t._v(" "),e("li",[t._v("服务器处理请求并返回数据")]),t._v(" "),e("li",[t._v("浏览器接收数据并解析")]),t._v(" "),e("li",[t._v("断开连接")])]),t._v(" "),e("h3",{attrs:{id:"_4-base64和url的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-base64和url的区别"}},[t._v("#")]),t._v(" 4.base64和url的区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“/”和“+”字符变为形如“%XX”的形式.\n")])])]),e("h3",{attrs:{id:"_5-base64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-base64"}},[t._v("#")]),t._v(" 5.base64")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("特点：\n\t1.便于网络传输\n\t2.不可见性\n区分：\n\t1.base64是编码(encodeing) 而不是加密(encryption)\n应用\n\t1.图片存储是2进制的，而不是文本形式，要传输他的话，要将2进制转为文本形式，这个时候就可以用base64\n")])])]),e("h3",{attrs:{id:"_4-http状态码及其含义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-http状态码及其含义"}},[t._v("#")]),t._v(" 4.HTTP状态码及其含义")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("1xx")]),t._v(":状态信息码\n"),e("ul",[e("li",[e("code",[t._v("100 continue")]),t._v(" 继续")])])]),t._v(" "),e("li",[e("code",[t._v("2xx")]),t._v(": 成功状态码(表示正常处理)\n"),e("ul",[e("li",[t._v("200 OK")]),t._v(" "),e("li",[t._v("201 请求成功并且创建了服务器资源")]),t._v(" "),e("li",[t._v("202 服务器接受请求，但并未处理")]),t._v(" "),e("li",[t._v("204 "),e("code",[t._v("No Content")]),t._v("成功但没有数据返回")])])]),t._v(" "),e("li",[e("code",[t._v("3xx")]),t._v("重定向\n"),e("ul",[e("li",[e("code",[t._v("301 Moved Permanently")]),t._v(" 永久重定向")]),t._v(" "),e("li",[e("code",[t._v("302 Found")]),t._v(" 临时重定向")]),t._v(" "),e("li",[e("code",[t._v("304 Not Modified")]),t._v(" 资源找到，但未符合条件")])])]),t._v(" "),e("li",[e("code",[t._v("4xx")]),t._v(" 客户端错误\n"),e("ul",[e("li",[e("code",[t._v("400 Bad Request")]),t._v(" 服务器无理解请求的格式，不要再次发起请求")]),t._v(" "),e("li",[e("code",[t._v("401 Unauthorized")]),t._v(" 未授权(未登录，无token...)")]),t._v(" "),e("li",[e("code",[t._v("403")]),t._v(" 禁止访问")]),t._v(" "),e("li",[e("code",[t._v("404")]),t._v(" 找不到与URI匹配的资源")])])]),t._v(" "),e("li",[e("code",[t._v("5xx")]),t._v(" 服务器错误\n"),e("ul",[e("li",[e("code",[t._v("500 Internal Server Error")]),t._v(" 最常见的错误")]),t._v(" "),e("li",[e("code",[t._v("503 Service Unavailable")]),t._v(" 服务器暂时无法处理请求")])])])]),t._v(" "),e("h3",{attrs:{id:"_5-https加密过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-https加密过程"}},[t._v("#")]),t._v(" 5.HTTPS加密过程")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("原理->过程\n\n1.客户端向服务器发起HTTPS请求\n2.服务器创建公钥私钥，将包含公钥的数字证书发送给客户端\n3.客户端对证书进行验证，验证通过后公钥将密钥进行加密\n4.客户端将加密过后的密钥发送给服务器\n5.服务器用自己的私钥对密钥进行解密\n6.之后就通过对称性加密的方式进行加密通信\n")])])]),e("h3",{attrs:{id:"_6-http缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-http缓存"}},[t._v("#")]),t._v(" 6.HTTP缓存")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("强缓存：\n\tHTTPCache-Control首部和Expries首部，给每个文档添加一个过时日期，浏览器再次发起请求的时候，就会以当前时间和过期时间进行比对，没过期，命中，过期，就去服务器请求新鲜的数据.\n\tCache-Control: max-age:可以设置最大使用事件，\n\tExpires:设置一个过期的日期，但是修改客户端的事件可以影响命中缓存，优先用cache\n\t\n协商缓存：\n\t资源到期了，并不意味资源发生改变，没改变就无需再次发起请求。客户端和服务端可以通过某种验证机制去判断当前请求是否可以使用缓存。所以第一次请求的时候浏览器就会把响应头部的缓存标识保存起来。再次请求就会带上这个头部。服务器验证可用，就是304，不可用就是200\n\t\n\tLast-modified/If-Modified-Since：Last-modified服务端资源最后修改时间，由服务器响应给浏览器，浏览器将它保存为If-Modified-Since。再次发起请求就会比对这两个，一样就表示没修改过，返回304。不一样就是修改过了。返回200。\n\t\n\tEtag/If-None-Match：Etag是服务器生成的hash字符串，表示文件唯一标识符，在请求时由服务器发送给浏览器，浏览器保存为If-None-Match，再次发起请求时，会进行对比，一样就304，不一样200了\n\t\n\t区别：\n\t\tEtag精确度比Last-Modified高，因为修改时间变了，但是你内容没变，所以Etag更好\n")])])]),e("h3",{attrs:{id:"_7-dns运行过程-dns性能优化的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-dns运行过程-dns性能优化的方法"}},[t._v("#")]),t._v(" 7.DNS运行过程，DNS性能优化的方法？")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("DNS作用")])])]),t._v(" "),e("li",[e("p",[t._v("把域名解析成相应的ip地址")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("DNS过程")])])]),t._v(" "),e("li",[e("p",[t._v("1."),e("strong",[t._v("递归查询")])]),t._v(" "),e("ul",[e("li",[e("img",{attrs:{src:"C:%5CUsers%5C%E9%82%B1%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1584711632672.png",alt:"1584711632672"}})]),t._v(" "),e("li",[t._v("1.输入 "),e("strong",[t._v("域名")]),t._v("后，"),e("strong",[t._v("客户端")]),t._v("向"),e("strong",[t._v("本地DNS服务器")]),t._v("要该域名的"),e("strong",[t._v("IP地址")]),t._v("。")]),t._v(" "),e("li",[t._v("2."),e("strong",[t._v("本地DNS服务器")]),t._v("没有，本地DNS服务器找"),e("strong",[t._v("根域名服务器")]),t._v("要.")]),t._v(" "),e("li",[t._v("3.根域名服务器没有，根服务器找A顶级域名服务器要，逐级向下找")]),t._v(" "),e("li",[t._v("4.找到后把该域名逐级返回到"),e("strong",[t._v("客户端")]),t._v("，并保存到缓存，以备下一次使用")])])]),t._v(" "),e("li",[e("p",[t._v("2."),e("strong",[t._v("迭代查询")])]),t._v(" "),e("ul",[e("li",[e("img",{attrs:{src:"C:%5CUsers%5C%E9%82%B1%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1584712482251.png",alt:"1584712482251"}})]),t._v(" "),e("li",[t._v("全是客户端进行询问")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("总结")])]),t._v(" "),e("ul",[e("li",[t._v("输入域名➡️操作系统检查本地host文件是否有映射关系 false？ ➡️ 客户端向本地DNS发起查询 ➡️ 采用递归查询或者迭代查询.")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("DNS优化")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("减少"),e("code",[t._v("DNS")]),t._v("请求数量")]),t._v(" "),e("ul",[e("li",[t._v("DNS查找数等于页面上不同的主机名数，包括页面URL，图片，脚本文件，样式表等的主机名，减少不同的主机名就可以减少DNS查找")])])]),t._v(" "),e("li",[e("p",[t._v("缩短"),e("code",[t._v("DNS")]),t._v("请求时间")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("预加载")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("DNS Prefetch")]),t._v("让具有此属性的域名不需要用户点击链接就可以在后台解析，则域名解析和内容载入是串行的网络操作，减少等待时间.")])]),t._v(" "),e("li",[e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//atanx.alicdn.com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])])])])])])])])]),t._v(" "),e("h3",{attrs:{id:"_8-http0-9-1-0-1-1-2-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-http0-9-1-0-1-1-2-0"}},[t._v("#")]),t._v(" 8.HTTP0.9/1.0/1.1/2.0")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.HTTP0.9:\n\t就是请求+响应的模式，tcp三次握手连接+四次挥手断开连接\n\t\n2.HTTP1.0\n\t1.在HTTP1.0里面就可以展示多种文件类型，js，css，图片，视频，声音；\n\t2.在HTTP1.0里面可以设置请求头，响应头可以满足多种类型的数据传输\n\t3.accept：text/html accept-encoding：gzip， accept-Charset: ISO-8859-1,utf-8\n\t4.但是每一次请求数据都得进行一次连接和断开连接，消耗性能\n\t5.缓存机制，状态码，用户代理（客户端基础信息）\n\n3.HTTP1.1\n\t1.持久化连接（默认开启）：多次请求数据则不需要断开连接；连接一次可以进行多次请求响应；\n\t2.缺点：队头阻塞：只能上一次请求响应完成才会进行下一次请求；那么就有可能阻塞后面的请求\n\t3.引入Cookie：\n\t4.问题：对带宽的利用率低（tcp启动慢，开启多条tcp连接，队头阻塞）\n\n4.HTTP2.0\n\t0.原因：tcp会竞争带宽，队头阻塞\n\t1.多路复用解决TCP竞争：就是一个域名只是用一个tcp长连接去传输数据，这样就不会竞争\n\t2.解决队头阻塞：正在执行的请求卡住就阻塞后面的，所以实现了资源并行请求，不按照顺讯返回，谁好了谁返回\n\t3.头部压缩：对响应头请求头进行了压缩，虽然单个头部不大，但是在大项目里面有几百个资源，如果把它们压缩到原来的20%，那也能提高很多性能\n\t4.设置请求的优先级，有些比较重要希望可以先对他进行请求\n")])])]),e("h3",{attrs:{id:"_9-tcp和udp的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-tcp和udp的区别"}},[t._v("#")]),t._v(" 9.tcp和udp的区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.TCP 面向连接的\t\t\tUDP是无连接的\n2.TCP安全性高\t\t\t   UDP安全性低\n3.效率低\t\t\t\t     效率高\n4.TCP具有数据包排序机制，把乱序的数据包还原成完整的文件\t大文件被拆分成小数据包传输，UDP是不知道如何组装，就无法还原成完整文件\n5.TCP数据包丢失提供重新传机制  UDP数据包传输的过程中会丢失，不会重新传\n")])])]),e("h3",{attrs:{id:"_10-知道哪些content-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-知道哪些content-type"}},[t._v("#")]),t._v(" 10.知道哪些content-type")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.text/plain\t\t文本类型\n2.text/css\t\t\tcss类型\n3.text/html\t\t\thtml类型\n4.application/json json类型\n5.application/JavaScript js类型\n")])])]),e("h3",{attrs:{id:"_11-http报文结构-有哪些header"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-http报文结构-有哪些header"}},[t._v("#")]),t._v(" 11.HTTP报文结构，有哪些header")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("请求报文结构：\n\t1.请求行：请求方法（Method） + 空格 + 统一资源标识符（URI） + 空格 + HTTP版本 + CRLF \n\t2.请求头：字段名 + 冒号 + 值 + CRLF \n\t\tReferer：后面路径也带上\n\t\tConnection，Cookie，Origin，Content-Length\n\t3.空行： 回车符（CR）+ 换行符（LF\n\t4.请求体： 由用户自定义添加，如post的body等；\n\n\t\n响应报文结构：\n\t1.状态行：HTTP版本 + 空格 + 状态码 + 空格 + 状态码描述 + CR LF ；\n\t2.响应头：字段名 + 冒号 + 值 + CR LF ；\n\t\tAccess-Control-Allow-Headers，Connection，Content-Type，Set-Cookie\n\t3.空行： 回车符（CR）+ 换行符（LF） ；\n\t4.响应体： 由用户自定义添加，如post的body等；\n")])])]),e("h3",{attrs:{id:"_12-http请求流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-http请求流程"}},[t._v("#")]),t._v(" 12.HTTP请求流程")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("构查备等连发\n1.构建请求行，请求方法/请求URI/HTTP版本\n2.在本地查找缓存，有就拦截请求，返回该资源副本，减少服务器压力\n3.准备IP和端口：\n\t1.通过DNS解析域名，得到IP\n\t2.解析URL有无端口号，没有默认80\n4.等待TCP队列\n\t1.一个域名6个连接，10个TCP请求的话，4个需要排队，少于6，则进入连接\n5.建立连接\n\t三次握手\n6.发送HTTP请求\n\t建立连接之后，浏览器就可以和服务器通信\n                              \n")])])]),e("h3",{attrs:{id:"_13-http响应流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-http响应流程"}},[t._v("#")]),t._v(" 13.HTTP响应流程")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.返回请求\n 处理好请求返回数据给浏览器\n2.关闭连接\n \t一般情况下，直接关闭连接即可，但是如或有connection:keepAlive，就保持长连接，节省下一次的连接时间\n3.重定向\n")])])]),e("h3",{attrs:{id:"_14-第二次打开网页保持登陆状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-第二次打开网页保持登陆状态"}},[t._v("#")]),t._v(" 14.第二次打开网页保持登陆状态")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.使用了setCookie字段\n2.第一次登陆成功，后端生成用户身份的字符串，保存响应头setCookie中，返回给前端。\n3.浏览器解析响应头，遇到setCookie，保存在本地。\n4.再次访问时，就会读取本地setCookie信息，并且在请求头把它带上发送给服务器\n5.服务器验证，通过后把该用户的信息发送给浏览器\n")])])]),e("h3",{attrs:{id:"_14-多个网站共享登录状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-多个网站共享登录状态"}},[t._v("#")]),t._v(" 14.多个网站共享登录状态")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("在多个网站之间共享登录状态指的就是单点登录，多个应用系统中，用户只需要登录一次就可以访问所有互相信任的应用系统。\n\n实现方法：将用户信息验证中心独立出来，作为一个单独的认证中心，这个认证中心用于判断客户端发送的账号秘法的正确性，然后向客户端返回对应的用户信息，并且返回由服务器端秘钥加密的登录信息的token给客户端，且具有时效性。当一个网站跳到另外一个时，通过url参数茶传递token，然后该网站把token传给认证中心，认证中心对token进行解密后验证，如果没失效，就返回用户对应的信息，失效则重定向。\n")])])]),e("h3",{attrs:{id:"_15-网络的七层模型-各自有什么作用-为什么要进行分层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-网络的七层模型-各自有什么作用-为什么要进行分层"}},[t._v("#")]),t._v(" 15.网络的七层模型，各自有什么作用，为什么要进行分层")]),t._v(" "),e("h3",{attrs:{id:"_16如果发起一个请求-又发起了一个请求-但是第一个请求的结果在第二个请求之后到达"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16如果发起一个请求-又发起了一个请求-但是第一个请求的结果在第二个请求之后到达"}},[t._v("#")]),t._v(" 16如果发起一个请求，又发起了一个请求，但是第一个请求的结果在第二个请求之后到达")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n")])])]),e("h3",{attrs:{id:"_17-tcp三次握手-四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-tcp三次握手-四次挥手"}},[t._v("#")]),t._v(" 17.TCP三次握手，四次挥手")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("三次握手：确保双方都有发送和接收的能力\n\n四次挥手：因TCP是全双工的，所以连接的拆除需要单独将两个通道分别拆除。\n\t1.如果是两次，那么会是半关闭状态，还有一端可以发送，另一端接收。\n\t以客户端主动发起为例：\n\t\t1.客户端发起请求给服务端，FIN标识（为1），客户端序列号N。\n\t\t2.服务端接收到包含FIN的请求消息后，校验无误后发确认请求ACK消息给客户端，ACK(1)，Seq=序列号N+1；\n\t\t3.服务端像上面一样做，断开另外一个通道\n因为TCP是一个全双工协议，必须单独拆除每一条信道。4次挥手的目的是终止数据传输，并回收资源，此时两个端点两个方向的序列号已经没有了任何关系，必须等待两方向都没有数据传输时才能拆除虚链路\n")])])]),e("h3",{attrs:{id:"_17-tls握手过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-tls握手过程"}},[t._v("#")]),t._v(" 17.TLS握手过程")]),t._v(" "),e("h3",{attrs:{id:"_18-简单请求非简单请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-简单请求非简单请求"}},[t._v("#")]),t._v(" 18.简单请求非简单请求")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("简单请求：\n\t1.HTTP方法是下面之一：HEAD GET POST\n\t2.HTTP头部信息不超出以下几种字段：\n\t\t1.AcceptAccept\n    2.Accept-Language\n    3.Content-Type，但仅能是下列之一\n      application/x-www-form-urlencoded\n      multipart/form-data\n      text/plain\n \n")])])]),e("h3",{attrs:{id:"_18-数字证书中都包括哪些内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-数字证书中都包括哪些内容"}},[t._v("#")]),t._v(" 18.数字证书中都包括哪些内容？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("最简单的数字证书，包含一个公钥，名称，证书授权中心的数字签名。\n")])])]),e("h3",{attrs:{id:"_19-http2-头部压缩是如何实现的-多路复用的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-http2-头部压缩是如何实现的-多路复用的原理"}},[t._v("#")]),t._v(" 19.HTTP2 头部压缩是如何实现的，多路复用的原理？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n")])])]),e("h3",{attrs:{id:"_20-什么是字节流-什么事数据报"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-什么是字节流-什么事数据报"}},[t._v("#")]),t._v(" 20.什么是字节流，什么事数据报")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.字节流：TCP\n\t我的理解是对数据传输的一种抽象化，让一端可以传输字节给另外一端的通信方式，一般都是双向的，是一种可靠的。\n2.数据报：\n\t我的理解是他就是UDP，传输方式，无需连接即可传输数据，但是不这么可靠\n")])])]),e("h3",{attrs:{id:"_21-http请求的幂等概念的理解以及常见请求的幂等性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-http请求的幂等概念的理解以及常见请求的幂等性"}},[t._v("#")]),t._v(" 21.http请求的幂等概念的理解以及常见请求的幂等性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.文档：相同的请求执行多次和执行一次的副作用是一样的。\n2.幂等的方法有哪些：\n\tGET，HEAD，PUT，DELETE，OPTIONS 和 TRACE 方法都是幂等的。\n3.但POST不是幂等的，常用于修改资源，就不满足传入同一个参数，返回结果不一样了\n")])])]),e("h3",{attrs:{id:"_22-http的option预请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-http的option预请求"}},[t._v("#")]),t._v(" 22.HTTP的option预请求")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("与head类似，是客户端用于查看服务器的性能 。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。\n1.获取服务器支持HTTP请求方法；黑客比较常用\n2.检查服务器性能，跨域时，向另外一个域名发送options请求头，可以判断发送的请求是否安全。\n3.属于复杂请求；\n")])])]),e("h3",{attrs:{id:"_23-什么是cdn-如何查找最近的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-什么是cdn-如何查找最近的"}},[t._v("#")]),t._v(" 23.什么是CDN，如何查找最近的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CDN：内容分发网\n将网站的内容发布到最接近用户的站点，让用户就近获取资源，避免了网络拥塞情况，提高响应速度。解决了网络单宽小，用户访问量大等问题。\n\n根据用户的IP地址，去寻找一台离用户最近的服务器。\n")])])]),e("h3",{attrs:{id:"_24-为什么tcp是可靠传输"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-为什么tcp是可靠传输"}},[t._v("#")]),t._v(" 24.为什么TCP是可靠传输")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.TCP具有数据重传机制：\n\tTCP不像UDP在传输数据过程中会丢包，每发出一个数据包，都会有一个确认接收，超过一定时间，会被判断成没有接受到，会重新发送\n2.具有编排序号能力\n\t将传输数据分为各个小数据包，传到浏览器，能拼接成完整的数据\n")])])]),e("h3",{attrs:{id:"_10-503"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-503"}},[t._v("#")]),t._v(" 10.503")]),t._v(" "),e("h2",{attrs:{id:"二、html"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、html"}},[t._v("#")]),t._v(" 二、HTML")]),t._v(" "),e("h3",{attrs:{id:"_1-h5标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-h5标签"}},[t._v("#")]),t._v(" 1.H5标签")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("header/footer/article/nav/section/video/audio/canvas\n")])])]),e("h3",{attrs:{id:"_2-get和post"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-get和post"}},[t._v("#")]),t._v(" 2.get和post")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("浏览器：\n\tget用于请求资源\t\tpost用于提交表单\n\tget参数url可见\t\t post参数不可见\n\tget请求可以缓存\t\tpost请求不可以缓存\n\tget数据一般2-4k\t\t post请求传输数据大小php.inis设定\n\tget一般用于查询的数据 post用于添加修改删除之类的。\n\tget安全性低一点\t\t\tpost安全性比get高   解释：登录传参 get=>login?name='qmj'&password=123\n")])])]),e("h3",{attrs:{id:"_3-post数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-post数据类型"}},[t._v("#")]),t._v(" 3.post数据类型")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.application/x-www-form-urlencoded(最常见)\n\t原生表单，不设置enctype，就用这种方式\n\t\n2.multipart/form-data(常用)\n\t必须让表单的enctype等于multipart/form-data\n\t\n3. application/json\n\n4.text/xml\n")])])]),e("h3",{attrs:{id:"_4-行内元素有哪些-块级元素有哪些-空-void-元素有那些-行内元素和块级元素有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-行内元素有哪些-块级元素有哪些-空-void-元素有那些-行内元素和块级元素有什么区别"}},[t._v("#")]),t._v(" 4.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？")]),t._v(" "),e("ul",[e("li",[t._v("行内元素有："),e("code",[t._v("a b span img input select strong")])]),t._v(" "),e("li",[t._v("块级元素有："),e("code",[t._v("div ul ol li dl dt dd h1 h2 h3 h4… p")])]),t._v(" "),e("li",[t._v("空元素： "),e("code",[t._v("<br> <hr> <img> <input> <link> <meta>")])]),t._v(" "),e("li",[t._v("行内元素不可以设置宽高，不独占一行")]),t._v(" "),e("li",[t._v("块级元素可以设置宽高，独占一行")])]),t._v(" "),e("h3",{attrs:{id:"_5-doctype作用-严格模式与混杂模式如何区分-它们有何意义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-doctype作用-严格模式与混杂模式如何区分-它们有何意义"}},[t._v("#")]),t._v(" 5. Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("!DOCTYPE html")]),t._v("位于文档的最前面，告诉浏览器的解析器用什么规范去解析这个文档")])]),t._v(" "),e("h3",{attrs:{id:"_6-操作节点-node-的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-操作节点-node-的方法"}},[t._v("#")]),t._v(" 6.操作节点(Node)的方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.appendChild\t\t添加节点\n2.removeChild\t\t删除节点\n3.replaceChild\t\t替换几点\t\t返回被替换节点\n4.hasChildNodes\t\t是否有子节点\t   返回布尔值\n")])])]),e("h3",{attrs:{id:"_7-domcontentloaded和load区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-domcontentloaded和load区别"}},[t._v("#")]),t._v(" 7.DOMContentLoaded和load区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("DOMContentLoaded：\n\t当初始的HTML文档被完全加载和解析完成之后，DOMContentLoaded事件被触发，而无需等待样式表、图像和子框架的完全加载。\nload:\n\t整个页面及所有依赖资源如样式表和图片都已完成加载时，将触发load事件。\n")])])]),e("h3",{attrs:{id:"_8-html5新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-html5新特性"}},[t._v("#")]),t._v(" 8.HTML5新特性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.语义化标签\n\theader，footer，article，nav，audio，video\n2.2D/3D:\n\tcanvas，svg\n3.多媒体\n\taudio、video\n4.离线存储\n\tlocalStorage，sessionStorage，indexDB\n")])])]),e("h3",{attrs:{id:"_9-queryselector可以选择伪元素吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-queryselector可以选择伪元素吗"}},[t._v("#")]),t._v(" 9.querySelector可以选择伪元素吗")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("不能，MDN上面查过，注意事项里面提到CSS伪类，伪元素无法返回任何元素 \n")])])]),e("h3",{attrs:{id:"_10-前端渲染和后端渲染区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-前端渲染和后端渲染区别"}},[t._v("#")]),t._v(" 10.前端渲染和后端渲染区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("服务端渲染：\n\t由后端去管理路由的匹配，每个url在后端对应一个资源，在后端渲染好再展示到前端上。\n\t服务器做的事情：\n\t\turl发送到服务器，服务器自己正则匹配，控制器处理生成HTML和数据，返回给前端\n\n前端渲染：\n\t由前端进行路由匹配规则，history和hash模式。\n\thtml，css，js资源都是由静态资源服务器返回的。\n\t数据通过接口进行请求，由后端返回数据。\n")])])]),e("h2",{attrs:{id:"三、浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、浏览器"}},[t._v("#")]),t._v(" 三、浏览器")]),t._v(" "),e("h3",{attrs:{id:"_1-跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-跨域"}},[t._v("#")]),t._v(" 1.跨域")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.jsonp\n\t利用浏览器没有跨域限制的漏送，通过script指向要访问的地址，\n\t并提供一个回调函数去接收通讯时接收的数据。\n\t但是只限用于get请求\n\t\n2.cors\n\t这个需要前后端同时支持，前端会自动实现，关键在于后端，服务端\n\t设置：\n\t\tAccess-Control-Allow-Origin 就可以开启CORS\n\t\tAccess-Control-Allow-Headers\n\t\tAccess-Control-Allow-Methods 哪些方法\n\t\n3.document.domain\n\t该方式只能用于二级域名相同的情况下，如：a.test.com与b.test.com\n\t只要给页面添加document.domain='根域名'\n")])])]),e("h3",{attrs:{id:"_2-浏览器缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器缓存机制"}},[t._v("#")]),t._v(" 2.浏览器缓存机制")]),t._v(" "),e("h3",{attrs:{id:"_3-如何进行网站的性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何进行网站的性能优化"}},[t._v("#")]),t._v(" 3.如何进行网站的性能优化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.请求HTML数据和构建DOM中间有空闲时间，是瓶颈\n")])])]),e("p",[e("strong",[t._v("三件套+server+图片")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("content")]),t._v("方面\n"),e("ul",[e("li",[t._v("减少"),e("code",[t._v("HTTP")]),t._v("请求：合并文件、"),e("code",[t._v("CSS")]),t._v("精灵、"),e("code",[t._v("inline Image")])]),t._v(" "),e("li",[t._v("减少"),e("code",[t._v("DNS")]),t._v("查询："),e("code",[t._v("DNS")]),t._v("缓存、将资源分布到恰当数量的主机名")]),t._v(" "),e("li",[t._v("减少"),e("code",[t._v("DOM")]),t._v("元素数量")]),t._v(" "),e("li",[t._v("使用iconfont")]),t._v(" "),e("li",[t._v("删除不必要的元素")])])]),t._v(" "),e("li",[e("code",[t._v("Server")]),t._v("方面\n"),e("ul",[e("li",[t._v("使用"),e("code",[t._v("CDN")])]),t._v(" "),e("li",[t._v("配置"),e("code",[t._v("ETag")])]),t._v(" "),e("li",[t._v("对组件使用"),e("code",[t._v("Gzip")]),t._v("压缩")])])]),t._v(" "),e("li",[e("code",[t._v("css")]),t._v("方面\n"),e("ul",[e("li",[t._v("将样式表放到页面顶部")]),t._v(" "),e("li",[t._v("不使用"),e("code",[t._v("CSS")]),t._v("表达式")]),t._v(" "),e("li",[t._v("使用"),e("code",[t._v("link")]),t._v("，不使用"),e("code",[t._v("@import")])]),t._v(" "),e("li",[t._v("避免使用表格")])])]),t._v(" "),e("li",[e("code",[t._v("Javascript")]),t._v("方面\n"),e("ul",[e("li",[t._v("将脚本放到页面底部 （自上而下的，先优先加载内容和样式，再去解析脚本）")]),t._v(" "),e("li",[t._v("将"),e("code",[t._v("javascript")]),t._v("和"),e("code",[t._v("css")]),t._v("从外部引入")]),t._v(" "),e("li",[t._v("压缩"),e("code",[t._v("javascript")]),t._v("和"),e("code",[t._v("css")])]),t._v(" "),e("li",[t._v("删除不需要的脚本")]),t._v(" "),e("li",[t._v("减少"),e("code",[t._v("DOM")]),t._v("访问 (重排、重绘，消耗CPU)")])])]),t._v(" "),e("li",[t._v("图片方面\n"),e("ul",[e("li",[t._v("优化图片：根据实际颜色需要选择色深、压缩")]),t._v(" "),e("li",[t._v("优化"),e("code",[t._v("css")]),t._v("精灵")]),t._v(" "),e("li",[t._v("不要在"),e("code",[t._v("HTML")]),t._v("中拉伸图片")])])])]),t._v(" "),e("h3",{attrs:{id:"_4-浏览器渲染ui"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器渲染ui"}},[t._v("#")]),t._v(" 4.浏览器渲染UI")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.浏览器获取HTML文件，然后对文件进行解析，形成DOM Tree\n\n2.与此同时，进行CSS解析，生成Style Rules\n\n3.接着将DOM Tree与Style Rules合成为 Render Tree\n\n4.接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标\n\n5.随后调用GPU进行绘制（Paint），遍历Render Tree的节点，并将元素呈现出来\n\n")])])]),e("h3",{attrs:{id:"_5-cookie和localsrorage、session、indexdb-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-cookie和localsrorage、session、indexdb-的区别"}},[t._v("#")]),t._v(" 5.cookie和localSrorage、session、indexDB 的区别")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("特性")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("cookie")]),t._v(" "),e("th",[t._v("session")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("localStorage")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("sessionStorage")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("数据生命周期")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("一般由服务器生成，可以设置过期时间，或者关闭窗口就消失")]),t._v(" "),e("td",[t._v("关闭生命周期就到期")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("除非被清理，否则一直存在")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("页面关闭就清理")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("数据存储大小")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4K")]),t._v(" "),e("td",[t._v("4k")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5M")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5M")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("与服务端通信")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("存放于浏览器，请求的时候会携带")]),t._v(" "),e("td",[t._v("存放于服务器")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不参与")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不参与")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("安全性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不安全")]),t._v(" "),e("td",[t._v("安全")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("形式")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字符串")]),t._v(" "),e("td",[t._v("对象")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("应用")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("登录、购物车")]),t._v(" "),e("td",[t._v("登录、购物车")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("跨域")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("支持跨域")]),t._v(" "),e("td",[t._v("不支持跨域")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),e("h3",{attrs:{id:"_6-chrome优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-chrome优点"}},[t._v("#")]),t._v(" 6.Chrome优点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.具有预解析操作：\n\t之前如果文件中出现js、css外部文件时，需要下载，就会耗费时间，从而导致DOM阻塞。\n\t现在会启动预解析线程，分析HTML文件有无外部引入文件，从而提前下载\n")])])]),e("h3",{attrs:{id:"_7-阻塞渲染问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-阻塞渲染问题"}},[t._v("#")]),t._v(" 7.阻塞渲染问题")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.css解析成CSSOM，html解析生成DOM，生成渲染树。\n2.JavaScript阻塞DOM生成：\n\t1.因为JavaScript要操作DOM\n\t2.可以使用defer(contentLoaded事件前)和async(加载完立马执行)去优化，使js文件异步加载\n3.css阻塞js执行，但是不阻塞js加载：\n\t1.因为js要操作css，需要依赖样式表\n\t2.所以css也有可能会阻塞dom生成\n\t3.前提是样式表放在前面，在后面的话，css解析就不会并行了\n")])])]),e("h3",{attrs:{id:"_8-如何生成dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-如何生成dom"}},[t._v("#")]),t._v(" 8.如何生成DOM")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.渲染引擎内部，有HTML解析器。解析过程是一边加载一遍解析的。\n2.content-type判断文件类型，创建一个渲染进程，网络进程和渲染进程会有一盒共享数据的管道。\n3.网络进程输送数据，渲染进程中的HTML解析器读取数据\n4.解析过程三个阶段：\n\t1.通过分词器将字节流转换为Token，分别是StartTag 文本Token EndTag 三个Token，放入栈中\n\t2.Token解析成DOM节点，DOM节点添加到DOM树中。HTML解析器有一个Token栈结构,用于解析父子关系，前面生成的Token压到这个栈中。\n\t3.压到栈中的是StartTag，解析器为该Token创建一个DOM节点，父节点就是栈中左边的元素。\n\t4.遇到的是 文本Token，生成文本节点，将该节点直接添加到DOM树种，无需压栈，父节点就是栈顶元素\n\t5.分词器解析出来的是EndTag，就和栈顶元素对比，比如 startTag div 和 EndTag div 匹配成功，则该div元素解析完成\n这样，分词器不断压栈出栈，整个解析过程一直这样解析下去，直到分词器将所有字节流分词器完成。\n\t\n")])])]),e("h3",{attrs:{id:"_9-减少白屏时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-减少白屏时间"}},[t._v("#")]),t._v(" 9.减少白屏时间")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("白屏原因：\n1.页面是需要布局树渲染的，那么JS，和CSS都会阻塞dom解析，所以会影响布局树的生成。\n\n解决办法：\n\t1.通过内联 JavaScript、内联 CSS 来移除这两种类型的文件下载，这样获取到 HTML 文件 之后就可以直接开始渲染流程了。\n  2.但并不是所有的场合都适合内联，那么还可以尽量减少文件大小，比如通过 webpack 等 工具移除一些不必要的注释，并压缩 JavaScript 文件。\n  3.还可以将一些不需要在解析 HTML 阶段使用的 JavaScript 标记上 async 或者 defer。\n  4.对于大的 CSS 文件，可以通过媒体查询属性，将其拆分为多个不同用途的 CSS 文件，这 样只有在特定的场景下才会加载特定的 CSS 文件。\n")])])]),e("h3",{attrs:{id:"_10-浏览器安全xss-csrf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-浏览器安全xss-csrf"}},[t._v("#")]),t._v(" 10.浏览器安全XSS，CSRF")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("一、XSS：跨站脚本攻击\n\t1.概念：黑客往HTML文件orDOM文件注入恶意脚本，从而在用户浏览页面时对用户进行攻击。一开始是跨域进行攻击，但是现在通过往HTML文件中注入恶意代码的方式很多，所以跨域注入脚本已经不是唯一手段。因无法识别恶意脚本还是自己的脚本，所以恶意脚本有普通脚本相同权限。\n\t2.攻击什么：\n\t\t1.窃取Cookie数据：\n\t\t\t恶意JS通过document.cooike获取cookie信息，可以模拟登录，进行转账；\n\t\t2.监听用户行为：\n\t\t\tJS可以通过addEventlistener监听键盘事件，输入账号密码等操作完全被监听。\n\t3.怎么攻击：\n\t\t1.存储型XSS攻击：恶意脚本存储在有漏洞的服务器，用户访问，脚本获取信息，发送给黑客的服务器；\n\t\t2.反射型：用户在请求的时候，就把恶意脚本嵌入在请求链接提交给服务器，服务器又将恶意代码反射给浏览器。这就是XSS攻击。\n\t\t\t例子：通过QQ群，邮箱里面引诱用户点击的恶意链接。\n\t\t3.基于DOM的XSS攻击：不涉及服务器，黑客将恶意脚本注入页面，如WiFi网络，本地恶意软件劫持正在传输的HTML并且修改内容。\n\t4.怎么防御：\n\t\t反射型和存储型都需要经过服务器，属于服务器漏洞；而基于DOM的XSS攻击是在浏览器端完成，属于前端安全漏洞；\n\t\t1.服务器漏洞：\n\t\t\t1.在服务端进行过滤或者转码，将script过滤，或者&lt;script&gt;所以等传给浏览器的时候就不会执行恶意代码；\n\t\t\t2.利用SCP：虽然转码有效果，但安全问题不能完全依赖服务端。SCP功能：\n\t\t\t\t1.是禁止下载其他域的资源文件\n\t\t\t\t2.禁止向第三方提交数据，所以用户数据不会外泄\n\t\t\t\t3.禁止执行内联脚本\n\t\t\t\t3.有上报功能，发现了XSS，及时修复；\n\t\t\t3.使用HTTPOnly：一般情况，XSS攻击是盗用cookie的，使用这个属性可以保护Cookie的安全；\n\t\t\t\t1.这样做的目的是让Cookie只在HTTP请求中使用，无法通过JavaScript来读取这段Cookie。\n\t\t\t\t2.document.cookie就无法读取到Cookie了\n\n二、SCRF——跨站请求伪造\n\t1.概念：黑客引诱用户打开网站，利用用户的登录状态发起跨站请求，也就是做一些坏事；\n\t2.攻击什么：利用用户登录状态做坏事\n\t3.攻击方式：\n\t\t1.自动发起Get请求：最容易的方式，通过可以跨域的标签，如<img src=“转账接口” />，到时候就会自动发起请求，完成转账；\n\t\t2.自动发起POST请求：有些接口是POST方法的，写一个隐藏form表单，到时候利用登录状态，直接执行submit，完成转账；\n\t\t3.引诱点击链接：比如点击下载什么美女图片啊，点了之后实际上就调用了转账接口，完成转账；\n\t4.如何防御：\n\t\t1.利用Cookie的SameSite属性： 因为Cookie具有维护浏览器和服务器的登录状态数据。\n\t\t\t1.该属性可以禁止第三方的Cookie发送；\n\t\t\t2.在HTTP响应头中，通过set-cookie字段设置cookie，可以带上SameSite选项；\n\t\t\t3.SameSite有三个值：\n\t\t\t\t1.Strict：完全禁止第三方\n\t\t\t\t2.Lax:相对宽松，第三方链接打开，第三方站点提交Cookie能携带Cookie，但是第三方Post，img，iframe都不会携带；\n\t\t\t\t3.None：完全不会禁止，任何情况都可以携带Cookie\n\t\t2.服务端验证请求的来源站点：判断是否第三方\n\t\t\t1.HTTP请求头中有Referer和Origin属性\n\t\t\t2.Referer记录HTTP请求的来源地址，但是有些时候暴露URL给服务器并不合适，所以选择不上传Referer；\n\t\t\t3.Origin属性：在XHR，Fecth发起请求，都会带上Origin（不含有路径信息）属性；\n\t\t3.CSEF Token\n\t\t\t除了上面两种，还可采用Token验证\n\t\t\t1.首先，在浏览器向服务器发起请求时，服务器生成一个CSRF Token（服务器生成的字符串），然后将字符串植入页面并返回；\n\t\t\t2.第二步，进行权限操作的时候就带上这个Token，然后验证Token是否合法；\n\t\t\t3.如何使第三方，那肯定是没有Token的，因为Token在页面中，必须要打开页面；\n")])])]),e("h3",{attrs:{id:"_11-cookie有哪些值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-cookie有哪些值"}},[t._v("#")]),t._v(" 11.cookie有哪些值")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.value：保存的值，字符串形式\n2.domain：哪些域名可以使用\n3.path：域名下哪些路径可以使用，一般都是/\n4.expires/max-Age：到期时间\n5.size：大小\n6.httpOnly：让该cookie只允许在HTTP请求中携带，不能通过第三方\n7.sameSite：通过严格，宽松，none模式限制cookie的携带。\n")])])]),e("h3",{attrs:{id:"_12-图片懒加载和预加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-图片懒加载和预加载"}},[t._v("#")]),t._v(" 12.图片懒加载和预加载")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("懒加载：延迟加载\n\t目的：优化服务端，减少请求次数。\n\t1.指的是在一个长网页中，用户达到该显示区域再去服务器请求数据加载。\n\t2.这样做的好处，提升网站首屏加载速度，提升用户体验，减少服务器压力。\n\t3.购物商场的商品图片，将图片真实路径保存起来，监听滚动事件，等到触发时，将路径赋值给图片的src属性。\n\t\n预加载：提前加载。\n\t1.提前将所需要资源请求到本地，这样后面在需要用到时就直接从缓存中获取资源\n\t2.预加载减少用户等待时间，提升用户体验。\n\t3.方式：\n\t\tjs中的image对象，为image对象设置src属性，实现预加载\n\t\n")])])]),e("h3",{attrs:{id:"_13-如果页面上图片很多-怎么优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-如果页面上图片很多-怎么优化"}},[t._v("#")]),t._v(" 13.如果页面上图片很多，怎么优化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n")])])]),e("h3",{attrs:{id:"_14-多个页面之间通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-多个页面之间通信"}},[t._v("#")]),t._v(" 14.多个页面之间通信")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('1.通过URL传递：\n\t"http://localhost:3000/b.html?data=" + data\n\t可能会导致url过长\n2.localStorage\n\t本地存储，同源策略，整个源的页面也可以访问到\n3.postMessage向指定窗口发送信息，监听窗口上的message信息；\n')])])]),e("h3",{attrs:{id:"_15-spa应用的优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-spa应用的优缺点"}},[t._v("#")]),t._v(" 15.spa应用的优缺点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("优点：\n\t1.用户体验好，快，内容改变不需要重新加载整个页面，避免不必要的渲染；\n\t2.对服务器压力小\n\t\n缺点：\n\t1.不利于SEO优化\n\t2.第一次加载时需要加载所有内容，会更耗时间\n\n")])])]),e("h2",{attrs:{id:"五、操作系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、操作系统"}},[t._v("#")]),t._v(" 五、操作系统")]),t._v(" "),e("h3",{attrs:{id:"_1-进程与线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程与线程"}},[t._v("#")]),t._v(" 1.进程与线程")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("进程是资源分配的基本单位，一个进程就是一个程序，\n线程是程序执行最小单位\n\n区别：\n\t1.多进程是资源分配的最小单位，\t线程是程序执行的最小单位\n\t2.进程有自己独立的地址空间，\t\t 线程是共享进程的数据的，使用相同的地址空间\n\t3.进程开销大\t\t\t\t\t\t线程开销小\n\n1.进程通信：\n\t1.匿名管道\n\t2.具名管道\n\t3.消息队列\n\t4.共享内存\n")])])]),e("h3",{attrs:{id:"_2-协程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-协程"}},[t._v("#")]),t._v(" 2.协程")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("协程是一种比线程更加轻量级的存在。\n可以把协程看成是跑在线程上任务，一个线程上可以存在多个协程，但是只能同时执行一个协程。\n注意：协程不被操作系统内核管理，完全由程序控制。这样的好处是提高性能，不会像切换线程样消耗资源。\n例子：当前执行A协程，要启动B协程，那么A协程需要将主线程的控制权交给B协程。则A是B的父协程。\n作用：将函数暂定执行/恢复执行\n")])])]),e("h2",{attrs:{id:"四、git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、git"}},[t._v("#")]),t._v(" 四、GIT")]),t._v(" "),e("h3",{attrs:{id:"_1-git-撤销-回滚"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-撤销-回滚"}},[t._v("#")]),t._v(" 1.git 撤销/回滚")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('1.撤销：在本地进行的相关操作，但是并没有提交到远程仓库；\n\t1.修改，但是未进行add\n\t\t1.git checkout fileName \n\t2.多个地方进行add，但是只想提交一部分\n\t\t1.$git reset HEAD <filename>\n\t3.已经commit但是未提交\n\t\t$ git commit --amend -m"说明"\n\n2.回滚：已经提交到远程仓库\n\t1.删除最后一次提交\n\t\t1.先git revert HEAD 再git push origin master\n\t\t2.先git reset --hard HEAD^再git push origin master -f、\n\t\t两者区别：revert是放弃某次提交，生成新提交，有记录\n\t\t\t\t reset是将HEAD指针指向未提交，没有记录\n')])])]),e("h4",{attrs:{id:"git-pull-和-git-fetch-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-和-git-fetch-的区别"}},[t._v("#")]),t._v(" . git pull 和 git fetch 的区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git fetch 只是将远程仓库的变化下载下来，并没有和本地分支合并。\n\ngit pull 会将远程仓库的变化下载下来，并和当前分支合并。\n")])])]),e("h4",{attrs:{id:"_3-git-rebase-和-git-merge-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-rebase-和-git-merge-的区别"}},[t._v("#")]),t._v(" 3. git rebase 和 git merge 的区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git merge 和 git rebase 都是用于分支合并，关键在 commit 记录的处理上不同。\n\ngit merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会\n保留之前每个分支的 commit 历史。\n\ngit rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后\n将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记\n录了。\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);